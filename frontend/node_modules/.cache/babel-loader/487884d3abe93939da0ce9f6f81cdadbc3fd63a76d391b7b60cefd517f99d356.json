{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITP\\\\SalonChamari\\\\frontend\\\\src\\\\components\\\\calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport SalonBooking from './Chavidu/salonBookingModel'; // Import your backend model\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyCalendar = () => {\n  _s();\n  const [date, setDate] = useState(new Date());\n  const [bookings, setBookings] = useState([]); // State to store retrieved bookings\n\n  useEffect(() => {\n    const fetchBookings = async () => {\n      try {\n        const response = await SalonBooking.find({\n          date: date.toISOString()\n        }); // Use toISOString for consistent date format\n        setBookings(response);\n      } catch (error) {\n        console.error('Error fetching bookings:', error);\n      }\n    };\n    fetchBookings(); // Call on component mount\n  }, [date]); // Re-fetch bookings when date changes\n\n  const onChange = newDate => {\n    setDate(newDate);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Calendar Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: onChange,\n      value: date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), bookings.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Bookings for \", date.toLocaleDateString(), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), bookings.map(booking => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name: \", booking.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Email: \", booking.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Service: \", booking.service]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Amount: \", booking.amount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time: \", booking.time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)]\n      }, booking._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(MyCalendar, \"2Ur+oIoaEY3Ft8OfyHBhmrw3Mxs=\");\n_c = MyCalendar;\nexport default MyCalendar;\nvar _c;\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","SalonBooking","jsxDEV","_jsxDEV","MyCalendar","_s","date","setDate","Date","bookings","setBookings","fetchBookings","response","find","toISOString","error","console","onChange","newDate","children","fileName","_jsxFileName","lineNumber","columnNumber","value","length","toLocaleDateString","map","booking","name","email","service","amount","time","_id","_c","$RefreshReg$"],"sources":["D:/ITP/SalonChamari/frontend/src/components/calendar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport SalonBooking from './Chavidu/salonBookingModel'; // Import your backend model\r\n\r\nconst MyCalendar = () => {\r\n  const [date, setDate] = useState(new Date());\r\n  const [bookings, setBookings] = useState([]); // State to store retrieved bookings\r\n\r\n  useEffect(() => {\r\n    const fetchBookings = async () => {\r\n      try {\r\n        const response = await SalonBooking.find({ date: date.toISOString() }); // Use toISOString for consistent date format\r\n        setBookings(response);\r\n      } catch (error) {\r\n        console.error('Error fetching bookings:', error);\r\n      }\r\n    };\r\n\r\n    fetchBookings(); // Call on component mount\r\n  }, [date]); // Re-fetch bookings when date changes\r\n\r\n  const onChange = (newDate) => {\r\n    setDate(newDate);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Calendar Component</h2>\r\n      <Calendar onChange={onChange} value={date} />\r\n      {bookings.length > 0 && (\r\n        <div>\r\n          <h3>Bookings for {date.toLocaleDateString()}:</h3>\r\n          {bookings.map((booking) => (\r\n            <div key={booking._id}>\r\n              <p>Name: {booking.name}</p>\r\n              <p>Email: {booking.email}</p>\r\n              <p>Service: {booking.service}</p>\r\n              <p>Amount: {booking.amount}</p>\r\n              <p>Time: {booking.time}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyCalendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}